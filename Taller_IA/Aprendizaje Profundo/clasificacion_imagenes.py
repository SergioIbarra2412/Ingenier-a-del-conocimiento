# -*- coding: utf-8 -*-
"""Clasificacion_Imagenes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNiwH2EBnTgTgPn4pro0D_OpKBwqqFyA
"""

import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.utils import to_categorical
from keras.preprocessing import image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical

# Montar Google Drive
from google.colab import drive
drive.mount('/content/drive')

(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()

x_train.shape,x_test.shape

# Normalizaci√≥n
x_train = x_train/255.0
x_test = x_test/255.0

# Promediar las tres bandas RGB para obtener una imagen es tonos de gris
x_train = np.mean(x_train, axis=3)
x_test = np.mean(x_test, axis=3)
x_train.shape,x_test.shape

# Definir la estructura del modelo
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(32,32,1)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

# Compilar el modelo
model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

# Entrenar el modelo
model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

# Hacer predicciones
df = pd.read_csv("/content/drive/MyDrive/Taller_IA/datos_2.csv")
test = df.values[:,1]
test = test.reshape((1,32,32))/255.0
print(test)
prediction = model.predict(test)
print(prediction)
print(prediction.argmax(axis=1))